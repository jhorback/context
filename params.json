{"name":"Context.js","tagline":"context.js - JavaScript dependency injection.","body":"ï»¿# context.js\r\nAn IOC container.\r\n\r\n\r\n## register(name, value, type)\r\nRegisters an object with the container.\r\nThe type is only needed if the value is a plain function not to be used \r\nas a constructor function (created with the new keyword).\r\nValid types are \"object\", \"constructor\", \"function\".\r\n\r\n## registry\r\nA JavaScript object containing references to all registered objects.\r\n\r\n## get\r\n`get(name)`\r\nRetrieves the dependency.\r\nIf the dependency is a constructor it will inject and return then 'newed' object as a singleton.\r\n\r\nIf a second argument passed is _true_ it will retrieve the _raw_ registry value.\r\nSo in the case of a constructor function it will return the un-'newed' object.\r\n\r\n\r\n## call(method, args, context)\r\nA utility method for satisfying the dependencies of a method directly.\r\nThe context will be applied to the method call -> 'this'\r\n\r\n\r\n## instantiate(constructor, args)\r\nCalls the constructor which can also be the name\r\n\r\nof a registered dependency.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}